import queryOverpass from '@derhuerst/query-overpass';

function generate_overpass_query(pairs) {
	const query = '[out:json][timeout:25];'
    + 'area(id:3600186382)->.searchArea;'
	+ '('
	+ pairs.map(pair => 
		`nwr[${pair.key}="${pair.value}"]["${pair.type}:wikidata"="${pair.wikidata}"](area.searchArea);`
	).join('')
	+ ');'
	+ 'out center;';
	return query;
}

export async function fetch_all_osm_data(overpass_pairs, retry=false) {
	const query = generate_overpass_query(overpass_pairs);
	console.log('Querying Overpass Turbo');
	
	let to_return = await queryOverpass(query, true);
	if(to_return.length==0){
		if(retry) {
			console.error('empty result again, terminating');
			process.exit(1);
		}

		console.error('ovepass returned empty result set, retrying');

		to_return = await fetch_all_osm_data(overpass_pairs, true);
	}
	preprocess_osm_data(to_return);
	return to_return;
}

function preprocess_osm_data(data) {
    data.forEach((item, index)=>{
		if(item.nodes){
			delete data[index].nodes;
        }
        if(item.tags['brand:wikidata']){
            data[index].wikidata = item.tags['brand:wikidata'];
        }
        else if(item.tags['operator:wikidata']){
			data[index].wikidata = item.tags['operator:wikidata'];
        }
        if(item.center){
			data[index].coordinates = [item.center.lat, item.center.lon];
            delete data[index].center;
        }
        else{
			data[index].coordinates = [item.lat, item.lon];
            delete data[index].lat;
            delete data[index].lon;
        }
		
		if(item.tags.atm === 'yes' && item.tags.amenity === 'bank'){
			let duplicate = JSON.parse(JSON.stringify(item));
			duplicate.tags = {amenity: 'atm', note: 'Autogenerated based atm=yes of nearby bank. If the ATM is tagged as separate object, please add atm=separate to the amenity=bank element.', wikidata: item.wikidata};
			data.push(duplicate);
		}
    });
}